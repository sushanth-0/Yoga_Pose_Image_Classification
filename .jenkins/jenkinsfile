pipeline {
  agent any
  environment {
    AWS_REGION = 'us-east-1'
  }

  stages {
    stage('Continuous Integration') {
      steps {
        script {
          echo "Linting repository"
          echo "Running unit tests"
        }
      }
    }

    stage('Login to ECR') {
      steps {
        withCredentials([string(credentialsId: 'AWS_ACCESS_KEY_ID', variable: 'AWS_ACCESS_KEY_ID'),
                         string(credentialsId: 'AWS_SECRET_ACCESS_KEY', variable: 'AWS_SECRET_ACCESS_KEY'),
                         string(credentialsId: 'ECR_REPOSITORY', variable: 'ECR_REPOSITORY'),
                         string(credentialsId: 'AWS_ACCOUNT_ID', variable: 'AWS_ACCOUNT_ID')]) {
          script {
            sh 'aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com'
          }
        }
      }
    }

    stage('Build Image') {
      steps {
        withCredentials([string(credentialsId: 'ECR_REPOSITORY', variable: 'ECR_REPOSITORY')]) {
          script {
            sh 'docker build -t ${ECR_REPOSITORY}:latest .'
          }
        }
      }
    }

    stage('Push Image') {
      steps {
        withCredentials([string(credentialsId: 'ECR_REPOSITORY', variable: 'ECR_REPOSITORY')]) {
          script {
            sh 'docker push ${ECR_REPOSITORY}:latest'
          }
        }
      }
    }

    stage('Continuous Deployment') {
      steps {
        sshagent(['ssh_key']) {
          withCredentials([string(credentialsId: 'ECR_REPOSITORY', variable: 'ECR_REPOSITORY'),
                           string(credentialsId: 'AWS_ACCOUNT_ID', variable: 'AWS_ACCOUNT_ID')]) {
            script {
              sh """
                ssh -o StrictHostKeyChecking=no -l ubuntu 52.203.49.148 << 'EOF'
                cd /home/ubuntu/
                wget https://raw.githubusercontent.com/sushanth-0/Yoga_Pose_Image_Classification/main/docker-compose.yml
                export IMAGE_NAME=${ECR_REPOSITORY}:latest
                aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com
                docker compose up -d
                EOF
              """
            }
          }
        }
      }
    }
  }

  post {
    always {
      sh 'docker system prune -f'
    }
  }
}
